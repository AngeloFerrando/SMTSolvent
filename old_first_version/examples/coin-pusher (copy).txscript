contract coinpusher {
    resources_bound: 2
    agents_bound: 2
    tokens_bound: 1
    @pre xn>0 play(xa?xn:xt){ if #xt >= 100 then xa!#xt:xt else skip }
}

Ogni stato sarà una roba del genere:
A[1]{ sigma1 } | ... | A[n] { sigman} | Contract { x1:v1,...,xm:vm, sigma }

(* state: all global variables + wallet of all users *)
(* {e}n denota il valore dell'espressione e allo stato n-esimo *)
(* Quindi, se nel linguaggio denoti con #T il numero di token T nel contratto,
   con {#T}n denoti il valore di questa espressione allo stato n *)

(* {#i:j}n : num di token di tipo j nel wallet di Ai (1<=i<=agents_bound) *)
(* {#j}n : num di token di tipo j nel contratto, zucchero sintattico per {#0:j}n *)
(* {x}n : valore della variabile globale x allo stato n nel contratto *)

(* {#T0 + #T1}n la somma del numero dei token T0 e T1 nel contratto allo stato n *)

query {
  Forall n. sum ({#i:0}n, [0, agents_bound]) = sum ({#i:0}0, [0, agents_bound])
}

# once the contract has at least one token, 
# there exist no subsequent state where the contract has 0 tokens
query {
  Forall n. {#0}n > 0 ==> Forall n'>n. {#0}n' > 0
}

# there exists no state where the contract has more than 100 tokens
query {
  Forall n. {#0}n <= 100
}

# time(i+1) >= time(i)
# time(0) == 0

# all that is not constrained has to be equal to previous value

PRETTY PRINTING DEL MODELLO

CoinPusher[0:T0] | A1[99:T0] | A2[1:T0]
--> play(A1!99:T0)@0
CoinPusher[99:T0] | A1[0:T0] | A2[1:T0]
--> play(A2!1:T0)@0
CoinPusher[0:T0] | A1[0:T0] | A2[100:T0]

ESPERIMENTO: usare enum anziche' int nel codominio delle funzioni, per vedere se migliora l'efficienza.
Questo non si può fare in tutte le funzioni, ma in molte usiamo dominio finito (ad es. id del partecipante, id della procedura chiamata)
