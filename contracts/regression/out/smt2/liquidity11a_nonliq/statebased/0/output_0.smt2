; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((pay) (C11) (coinbase))))
 (declare-fun w_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun w_1 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun xn_1 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun pay_amount_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun f_1 () Proc)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x93 (= aw_1_2 aw_0_2)))
 (let (($x92 (= aw_1_1 aw_0_1)))
 (let (($x91 (= aw_1_0 aw_0_0)))
 (let (($x90 (= w_1 w_0)))
 (let (($x95 (and $x90 (and $x91 $x92 $x93))))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) (ite (not (= xn_0 0)) $x95 (and $x95 true $x95)))))))))
(assert
 (let (($x116 (= aw_2_2 aw_1_2)))
 (let (($x115 (= aw_2_1 aw_1_1)))
 (let (($x114 (= aw_2_0 aw_1_0)))
 (let (($x117 (and $x114 $x115 $x116)))
 (let (($x167 (= w_2 t_w_1_0)))
 (let (($x170 (= aw_2_2 t_aw_1_0_2)))
 (let (($x169 (= aw_2_1 t_aw_1_0_1)))
 (let (($x168 (= aw_2_0 t_aw_1_0_0)))
 (let (($x141 (= t_aw_1_0_2 aw_1_2)))
 (let (($x138 (= xa_1 2)))
 (let (($x136 (= t_aw_1_0_1 aw_1_1)))
 (let (($x133 (= xa_1 1)))
 (let (($x131 (= t_aw_1_0_0 aw_1_0)))
 (let (($x121 (= xa_1 0)))
 (let (($x161 (and (ite $x121 (= t_aw_1_0_0 (+ aw_1_0 pay_amount_1)) $x131) (ite $x133 (= t_aw_1_0_1 (+ aw_1_1 pay_amount_1)) $x136) (ite $x138 (= t_aw_1_0_2 (+ aw_1_2 pay_amount_1)) $x141))))
 (let (($x113 (= w_2 w_1)))
 (let (($x118 (and $x113 $x117)))
 (let (($x164 (ite (not (>= pay_amount_1 0)) $x118 (and (and (= t_w_1_0 (- w_1 pay_amount_1)) $x161) true))))
 (let (($x143 (and (ite $x121 (= t_aw_1_0_0 (+ aw_1_0 (- pay_amount_1 1))) $x131) (ite $x133 (= t_aw_1_0_1 (+ aw_1_1 (- pay_amount_1 1))) $x136) (ite $x138 (= t_aw_1_0_2 (+ aw_1_2 (- pay_amount_1 1))) $x141))))
 (let (($x145 (and (and (= t_w_1_0 (- w_1 (- pay_amount_1 1))) $x143) true)))
 (let (($x166 (ite (and $x121) (and (ite (not (>= (- pay_amount_1 1) 0)) $x118 $x145)) (and $x164))))
 (let (($x175 (ite (not (<= pay_amount_1 w_1)) $x118 (and (and $x166 true (and $x167 (and $x168 $x169 $x170)))))))
 (let (($x110 (= f_1 pay)))
 (let (($x182 (ite $x110 (ite (not (= xn_1 0)) $x118 (and $x175)) (and (= t_w_1_0 (+ w_1 xn_1)) (and $x167 $x117)))))
 (let (($x107 (>= aw_1_2 0)))
 (let (($x106 (>= aw_1_1 0)))
 (let (($x105 (>= aw_1_0 0)))
 (let (($x108 (and $x105 $x106 $x107)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x108 (>= block_num_2 block_num_1) $x182))))))))))))))))))))))))))))))
(assert
 (let (($x290 (exists ((xa_q Int) )(let (($x286 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (pay_amount0_q Int) )(let (($x256 (and (or (and (distinct xa_q 0) true) (not (= awq0_0 (+ aw_1_0 w_1)))) (or (and (distinct xa_q 1) true) (not (= awq0_1 (+ aw_1_1 w_1)))) (or (and (distinct xa_q 2) true) (not (= awq0_2 (+ aw_1_2 w_1)))))))
 (let (($x354 (= awq0_2 aw_1_2)))
 (let (($x355 (= awq0_1 aw_1_1)))
 (let (($x356 (= awq0_0 aw_1_0)))
 (let (($x357 (and $x356 $x355 $x354)))
 (let (($x358 (= wq0 t_wq0_0)))
 (let (($x367 (and $x358 (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1) (= awq0_2 t_awq0_0_2)))))
 (let (($x250 (and (ite (= xa_q 0) (= t_awq0_0_0 (+ aw_1_0 pay_amount0_q)) (= t_awq0_0_0 aw_1_0)) (ite (= xa_q 1) (= t_awq0_0_1 (+ aw_1_1 pay_amount0_q)) (= t_awq0_0_1 aw_1_1)) (ite (= xa_q 2) (= t_awq0_0_2 (+ aw_1_2 pay_amount0_q)) (= t_awq0_0_2 aw_1_2)))))
 (let (($x385 (= wq0 w_1)))
 (let (($x386 (and $x385 $x357)))
 (let (($x387 (>= pay_amount0_q 0)))
 (let (($x388 (not $x387)))
 (let (($x261 (and (ite $x388 $x386 (and (and (= t_wq0_0 (- w_1 pay_amount0_q)) $x250) true)))))
 (let (($x368 (= t_awq0_0_2 aw_1_2)))
 (let (($x257 (= xa_q 2)))
 (let (($x372 (= t_awq0_0_1 aw_1_1)))
 (let (($x246 (= xa_q 1)))
 (let (($x376 (= t_awq0_0_0 aw_1_0)))
 (let (($x248 (= xa_q 0)))
 (let (($x266 (and (ite $x248 (= t_awq0_0_0 (+ aw_1_0 (- pay_amount0_q 1))) $x376) (ite $x246 (= t_awq0_0_1 (+ aw_1_1 (- pay_amount0_q 1))) $x372) (ite $x257 (= t_awq0_0_2 (+ aw_1_2 (- pay_amount0_q 1))) $x368))))
 (let (($x407 (not (>= (- pay_amount0_q 1) 0))))
 (let (($x270 (ite $x407 $x386 (and (and (= t_wq0_0 (- w_1 (- pay_amount0_q 1))) $x266) true))))
 (let (($x272 (and $x248)))
 (let (($x276 (ite (not (<= pay_amount0_q w_1)) $x386 (and (and (ite $x272 (and $x270) $x261) true $x367)))))
 (let (($x417 (= xn_q0 0)))
 (let (($x418 (not $x417)))
 (let (($x420 (= f_q0 pay)))
 (let (($x279 (ite $x420 (ite $x418 $x386 (and $x276)) (and (= t_wq0_0 (+ w_1 xn_q0)) (and $x358 $x357)))))
 (let (($x107 (>= aw_1_2 0)))
 (let (($x106 (>= aw_1_1 0)))
 (let (($x105 (>= aw_1_0 0)))
 (let (($x108 (and $x105 $x106 $x107)))
 (let (($x422 (>= xn_q0 0)))
 (let (($x280 (<= xa_q 2)))
 (let (($x281 (>= xa_q 0)))
 (let (($x282 (and $x281 $x280 $x422)))
 (or (not (and $x282 $x108 (>= block_num_1 block_num_1) $x279)) $x256))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x287 (<= xa_q 2)))
 (let (($x387 (>= xa_q 0)))
 (let (($x288 (and $x387 $x287)))
 (and $x288 true $x286))))))
 ))
 (and $x290)))
(check-sat)
