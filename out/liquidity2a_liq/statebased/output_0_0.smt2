; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((pay))))
 (declare-fun w_0 () Int)
(declare-fun oracle_1 () Int)
(declare-fun t_oracle_0_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun w_1 () Int)
(declare-fun oracle_0 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun oracle_2 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun pay_amount_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun xn_1 () Int)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x160 (= t_oracle_0_0 oracle_1)))
 (let (($x156 (= aw_1_2 aw_0_2)))
 (let (($x155 (= aw_1_1 aw_0_1)))
 (let (($x154 (= aw_1_0 aw_0_0)))
 (let (($x157 (and $x154 $x155 $x156)))
 (let (($x153 (= w_1 w_0)))
 (let (($x163 (ite (not (= xn_0 0)) (and $x153 $x157 (= oracle_0 oracle_1)) (and true true (and $x153 $x157 $x160)))))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) $x163)))))))))
(assert
 (let (($x184 (= oracle_1 oracle_2)))
 (let (($x213 (= aw_2_2 t_aw_1_0_2)))
 (let (($x212 (= aw_2_1 t_aw_1_0_1)))
 (let (($x211 (= aw_2_0 t_aw_1_0_0)))
 (let (($x210 (= w_2 t_w_1_0)))
 (let (($x215 (and $x210 (and $x211 $x212 $x213) $x184)))
 (let (($x206 (= t_aw_1_0_2 aw_1_2)))
 (let (($x203 (= xa_1 2)))
 (let (($x201 (= t_aw_1_0_1 aw_1_1)))
 (let (($x198 (= xa_1 1)))
 (let (($x195 (= t_aw_1_0_0 aw_1_0)))
 (let (($x192 (= xa_1 0)))
 (let (($x208 (and (ite $x192 (= t_aw_1_0_0 (+ aw_1_0 pay_amount_1)) $x195) (ite $x198 (= t_aw_1_0_1 (+ aw_1_1 pay_amount_1)) $x201) (ite $x203 (= t_aw_1_0_2 (+ aw_1_2 pay_amount_1)) $x206))))
 (let (($x182 (= aw_2_2 aw_1_2)))
 (let (($x181 (= aw_2_1 aw_1_1)))
 (let (($x180 (= aw_2_0 aw_1_0)))
 (let (($x179 (= w_2 w_1)))
 (let (($x185 (and $x179 (and $x180 $x181 $x182) $x184)))
 (let (($x217 (ite (not (>= pay_amount_1 0)) $x185 (and (and (= t_w_1_0 (- w_1 pay_amount_1)) $x208) true $x215))))
 (let (($x220 (ite (not (<= pay_amount_1 w_1)) $x185 (and (and $x217 true $x215)))))
 (let (($x174 (>= aw_1_2 0)))
 (let (($x173 (>= aw_1_1 0)))
 (let (($x172 (>= aw_1_0 0)))
 (let (($x175 (and $x172 $x173 $x174)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x175 (>= block_num_2 block_num_1) (ite (not (= xn_1 0)) $x185 (and $x220))))))))))))))))))))))))))))
(assert
 (let (($x295 (exists ((xa_q Int) )(let (($x290 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (block_num_q0 Int) (pay_amount0_q Int) (oracleq0 Int) (t_oracleq0_0 Int) )(let (($x261 (and (or (and (distinct xa_q 0) true) (not (= awq0_0 (+ aw_1_0 w_1)))) (or (and (distinct xa_q 1) true) (not (= awq0_1 (+ aw_1_1 w_1)))) (or (and (distinct xa_q 2) true) (not (= awq0_2 (+ aw_1_2 w_1)))))))
 (let (($x347 (= oracle_1 oracleq0)))
 (let (($x348 (= awq0_2 t_awq0_0_2)))
 (let (($x349 (= awq0_1 t_awq0_0_1)))
 (let (($x350 (= awq0_0 t_awq0_0_0)))
 (let (($x351 (and $x350 $x349 $x348)))
 (let (($x352 (= wq0 t_wq0_0)))
 (let (($x353 (and $x352 $x351 $x347)))
 (let (($x272 (and (ite (= xa_q 0) (= t_awq0_0_0 (+ aw_1_0 pay_amount0_q)) (= t_awq0_0_0 aw_1_0)) (ite (= xa_q 1) (= t_awq0_0_1 (+ aw_1_1 pay_amount0_q)) (= t_awq0_0_1 aw_1_1)) (ite (= xa_q 2) (= t_awq0_0_2 (+ aw_1_2 pay_amount0_q)) (= t_awq0_0_2 aw_1_2)))))
 (let (($x376 (and (= wq0 w_1) (and (= awq0_0 aw_1_0) (= awq0_1 aw_1_1) (= awq0_2 aw_1_2)) $x347)))
 (let (($x378 (not (>= pay_amount0_q 0))))
 (let (($x277 (and (ite $x378 $x376 (and (and (= t_wq0_0 (- w_1 pay_amount0_q)) $x272) true $x353)) true $x353)))
 (let (($x387 (not (= xn_q0 0))))
 (let (($x174 (>= aw_1_2 0)))
 (let (($x173 (>= aw_1_1 0)))
 (let (($x172 (>= aw_1_0 0)))
 (let (($x175 (and $x172 $x173 $x174)))
 (let (($x287 (and (and (>= xa_q 0) (<= xa_q 2) (>= xn_q0 0)) $x175 (>= block_num_q0 block_num_1) (ite $x387 $x376 (and (ite (not (<= pay_amount0_q w_1)) $x376 (and $x277)))))))
 (or (not $x287) $x261))))))))))))))))))))
 ))
 (let (($x291 (<= xa_q 2)))
 (let (($x292 (>= xa_q 0)))
 (let (($x293 (and $x292 $x291)))
 (and $x293 true $x290))))))
 ))
 (and $x295)))
(check-sat)
