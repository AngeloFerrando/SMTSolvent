contract CrowdFunding {
    tx_bound: 15
    agents_bound: 100
    tokens: T, P, Q

    const int start: 0
    const int end_donate: 10
    const int end_reclaim: 20
    const int goal: 100
    const agent receiver: 0
    int total_funds: 0
    map (agent -> int) donated_amount

    @time [start, end_donate]
    donate_funds(a?xn:T) {
	  if (a in donated_amount) 
        	donated_amount[a] = donated_amount[a] + xn
	  else
		donated_amount[a] = xn
	  total_funds = total_funds + xn;
    }

    @time [end_donate, end_reclaim]
    @pre total_funds < goal
    reclaim(a?0:T) {
	    a!(donated_amount[a]): T;
      total_funds = total_funds - donated_amount[a];
      donated_amount[a] = 0
    }

    @time [end_donate, end_reclaim]
    @pre total_funds >= goal
    withdraw() {
	 receiver!(total_funds):T;
        total_funds = 0
    }
}
1 2 3 4 5 6 7 8 9 10 
Trace: donate_funds(A!1:T):3 donate_funds(B!2:T):3 donate_funds(C!1:T):5 donate_funds(B!1:T):6 donate_funds(A!2:T):6 donate_funds(C!2:T):7  
come abilitare <> claim_funds()
Soundness: 
total_funds: end_donate >= goal -> (For all y. end_donate < y < end_reclaim -> ((For all z. end_donate < z < y : (not withdraw():z)) -> withdraw():y is enabled)
total_funds: end_donate < goal and For all a. donated_amount[a]: end_donate -> (((For all z. end_donate < z < y : (not reclaim(a?0:T):z)) -> reclaim(a?0:T) is enabled)

  

