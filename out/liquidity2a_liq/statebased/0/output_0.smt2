; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((pay))))
 (declare-fun w_0 () Int)
(declare-fun oracle_1 () Int)
(declare-fun t_oracle_0_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun w_1 () Int)
(declare-fun oracle_0 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun oracle_2 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun pay_amount_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun xn_1 () Int)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x104 (= t_oracle_0_0 oracle_1)))
 (let (($x100 (= aw_1_2 aw_0_2)))
 (let (($x99 (= aw_1_1 aw_0_1)))
 (let (($x98 (= aw_1_0 aw_0_0)))
 (let (($x101 (and $x98 $x99 $x100)))
 (let (($x97 (= w_1 w_0)))
 (let (($x107 (ite (not (= xn_0 0)) (and $x97 $x101 (= oracle_0 oracle_1)) (and true true (and $x97 $x101 $x104)))))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) $x107)))))))))
(assert
 (let (($x128 (= oracle_1 oracle_2)))
 (let (($x157 (= aw_2_2 t_aw_1_0_2)))
 (let (($x156 (= aw_2_1 t_aw_1_0_1)))
 (let (($x155 (= aw_2_0 t_aw_1_0_0)))
 (let (($x154 (= w_2 t_w_1_0)))
 (let (($x159 (and $x154 (and $x155 $x156 $x157) $x128)))
 (let (($x150 (= t_aw_1_0_2 aw_1_2)))
 (let (($x147 (= xa_1 2)))
 (let (($x145 (= t_aw_1_0_1 aw_1_1)))
 (let (($x142 (= xa_1 1)))
 (let (($x139 (= t_aw_1_0_0 aw_1_0)))
 (let (($x136 (= xa_1 0)))
 (let (($x152 (and (ite $x136 (= t_aw_1_0_0 (+ aw_1_0 pay_amount_1)) $x139) (ite $x142 (= t_aw_1_0_1 (+ aw_1_1 pay_amount_1)) $x145) (ite $x147 (= t_aw_1_0_2 (+ aw_1_2 pay_amount_1)) $x150))))
 (let (($x126 (= aw_2_2 aw_1_2)))
 (let (($x125 (= aw_2_1 aw_1_1)))
 (let (($x124 (= aw_2_0 aw_1_0)))
 (let (($x123 (= w_2 w_1)))
 (let (($x129 (and $x123 (and $x124 $x125 $x126) $x128)))
 (let (($x161 (ite (not (>= pay_amount_1 0)) $x129 (and (and (= t_w_1_0 (- w_1 pay_amount_1)) $x152) true $x159))))
 (let (($x164 (ite (not (<= pay_amount_1 w_1)) $x129 (and (and $x161 true $x159)))))
 (let (($x118 (>= aw_1_2 0)))
 (let (($x117 (>= aw_1_1 0)))
 (let (($x116 (>= aw_1_0 0)))
 (let (($x119 (and $x116 $x117 $x118)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x119 (>= block_num_2 block_num_1) (ite (not (= xn_1 0)) $x129 (and $x164))))))))))))))))))))))))))))
(assert
 (let (($x239 (exists ((xa_q Int) )(let (($x234 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (block_num_q0 Int) (pay_amount0_q Int) (oracleq0 Int) (t_oracleq0_0 Int) )(let (($x205 (and (or (and (distinct xa_q 0) true) (not (= awq0_0 (+ aw_1_0 w_1)))) (or (and (distinct xa_q 1) true) (not (= awq0_1 (+ aw_1_1 w_1)))) (or (and (distinct xa_q 2) true) (not (= awq0_2 (+ aw_1_2 w_1)))))))
 (let (($x291 (= oracle_1 oracleq0)))
 (let (($x297 (and (= wq0 t_wq0_0) (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1) (= awq0_2 t_awq0_0_2)) $x291)))
 (let (($x216 (and (ite (= xa_q 0) (= t_awq0_0_0 (+ aw_1_0 pay_amount0_q)) (= t_awq0_0_0 aw_1_0)) (ite (= xa_q 1) (= t_awq0_0_1 (+ aw_1_1 pay_amount0_q)) (= t_awq0_0_1 aw_1_1)) (ite (= xa_q 2) (= t_awq0_0_2 (+ aw_1_2 pay_amount0_q)) (= t_awq0_0_2 aw_1_2)))))
 (let (($x320 (and (= wq0 w_1) (and (= awq0_0 aw_1_0) (= awq0_1 aw_1_1) (= awq0_2 aw_1_2)) $x291)))
 (let (($x220 (ite (not (>= pay_amount0_q 0)) $x320 (and (and (= t_wq0_0 (- w_1 pay_amount0_q)) $x216) true $x297))))
 (let (($x226 (ite (not (= xn_q0 0)) $x320 (and (ite (not (<= pay_amount0_q w_1)) $x320 (and (and $x220 true $x297)))))))
 (let (($x118 (>= aw_1_2 0)))
 (let (($x117 (>= aw_1_1 0)))
 (let (($x116 (>= aw_1_0 0)))
 (let (($x119 (and $x116 $x117 $x118)))
 (let (($x231 (and (and (>= xa_q 0) (<= xa_q 2) (>= xn_q0 0)) $x119 (>= block_num_q0 block_num_1) $x226)))
 (or (not $x231) $x205))))))))))))))
 ))
 (and (and (>= xa_q 0) (<= xa_q 2)) true $x234)))
 ))
 (and $x239)))
(check-sat)
