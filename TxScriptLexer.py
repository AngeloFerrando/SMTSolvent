# Generated from TxScript.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u0142\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3")
        buf.write("!\3!\3\"\3\"\7\"\u00db\n\"\f\"\16\"\u00de\13\"\3#\3#\7")
        buf.write("#\u00e2\n#\f#\16#\u00e5\13#\3$\5$\u00e8\n$\3$\3$\5$\u00ec")
        buf.write("\n$\3$\3$\6$\u00f0\n$\r$\16$\u00f1\5$\u00f4\n$\3%\3%\3")
        buf.write("%\6%\u00f9\n%\r%\16%\u00fa\3%\3%\3%\6%\u0100\n%\r%\16")
        buf.write("%\u0101\5%\u0104\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u011d\n&\3\'\6\'")
        buf.write("\u0120\n\'\r\'\16\'\u0121\3\'\3\'\3(\3(\3)\3)\3*\3*\3")
        buf.write("*\3*\7*\u012e\n*\f*\16*\u0131\13*\3*\3*\3*\3*\3*\3+\3")
        buf.write("+\3+\3+\7+\u013c\n+\f+\16+\u013f\13+\3+\3+\3\u012f\2,")
        buf.write("\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write("\2Q\2S)U*\3\2\b\5\2\60\60aac|\7\2\60\60\62;C\\aac|\5\2")
        buf.write("C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\4\2\f\f\17\17")
        buf.write("\2\u014e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\3W\3\2\2\2\5`\3\2\2\2\7b\3\2\2\2\td\3\2\2\2\13h\3\2")
        buf.write("\2\2\ro\3\2\2\2\17z\3\2\2\2\21|\3\2\2\2\23~\3\2\2\2\25")
        buf.write("\u0087\3\2\2\2\27\u008f\3\2\2\2\31\u0094\3\2\2\2\33\u009c")
        buf.write("\3\2\2\2\35\u009f\3\2\2\2\37\u00a4\3\2\2\2!\u00a6\3\2")
        buf.write("\2\2#\u00a8\3\2\2\2%\u00aa\3\2\2\2\'\u00ac\3\2\2\2)\u00ae")
        buf.write("\3\2\2\2+\u00b0\3\2\2\2-\u00b2\3\2\2\2/\u00b5\3\2\2\2")
        buf.write("\61\u00b8\3\2\2\2\63\u00ba\3\2\2\2\65\u00bc\3\2\2\2\67")
        buf.write("\u00bf\3\2\2\29\u00c2\3\2\2\2;\u00c6\3\2\2\2=\u00c9\3")
        buf.write("\2\2\2?\u00cd\3\2\2\2A\u00d2\3\2\2\2C\u00d8\3\2\2\2E\u00df")
        buf.write("\3\2\2\2G\u00f3\3\2\2\2I\u0103\3\2\2\2K\u011c\3\2\2\2")
        buf.write("M\u011f\3\2\2\2O\u0125\3\2\2\2Q\u0127\3\2\2\2S\u0129\3")
        buf.write("\2\2\2U\u0137\3\2\2\2WX\7e\2\2XY\7q\2\2YZ\7p\2\2Z[\7v")
        buf.write("\2\2[\\\7t\2\2\\]\7c\2\2]^\7e\2\2^_\7v\2\2_\4\3\2\2\2")
        buf.write("`a\7}\2\2a\6\3\2\2\2bc\7\177\2\2c\b\3\2\2\2de\7k\2\2e")
        buf.write("f\7p\2\2fg\7v\2\2g\n\3\2\2\2hi\7u\2\2ij\7v\2\2jk\7t\2")
        buf.write("\2kl\7k\2\2lm\7p\2\2mn\7i\2\2n\f\3\2\2\2op\7e\2\2pq\7")
        buf.write("q\2\2qr\7p\2\2rs\7u\2\2st\7v\2\2tu\7t\2\2uv\7c\2\2vw\7")
        buf.write("k\2\2wx\7p\2\2xy\7v\2\2y\16\3\2\2\2z{\7*\2\2{\20\3\2\2")
        buf.write("\2|}\7+\2\2}\22\3\2\2\2~\177\7h\2\2\177\u0080\7w\2\2\u0080")
        buf.write("\u0081\7p\2\2\u0081\u0082\7e\2\2\u0082\u0083\7v\2\2\u0083")
        buf.write("\u0084\7k\2\2\u0084\u0085\7q\2\2\u0085\u0086\7p\2\2\u0086")
        buf.write("\24\3\2\2\2\u0087\u0088\7r\2\2\u0088\u0089\7c\2\2\u0089")
        buf.write("\u008a\7{\2\2\u008a\u008b\7c\2\2\u008b\u008c\7d\2\2\u008c")
        buf.write("\u008d\7n\2\2\u008d\u008e\7g\2\2\u008e\26\3\2\2\2\u008f")
        buf.write("\u0090\7u\2\2\u0090\u0091\7m\2\2\u0091\u0092\7k\2\2\u0092")
        buf.write("\u0093\7r\2\2\u0093\30\3\2\2\2\u0094\u0095\7t\2\2\u0095")
        buf.write("\u0096\7g\2\2\u0096\u0097\7s\2\2\u0097\u0098\7w\2\2\u0098")
        buf.write("\u0099\7k\2\2\u0099\u009a\7t\2\2\u009a\u009b\7g\2\2\u009b")
        buf.write("\32\3\2\2\2\u009c\u009d\7k\2\2\u009d\u009e\7h\2\2\u009e")
        buf.write("\34\3\2\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7n\2\2\u00a1")
        buf.write("\u00a2\7u\2\2\u00a2\u00a3\7g\2\2\u00a3\36\3\2\2\2\u00a4")
        buf.write("\u00a5\7?\2\2\u00a5 \3\2\2\2\u00a6\u00a7\7#\2\2\u00a7")
        buf.write("\"\3\2\2\2\u00a8\u00a9\7=\2\2\u00a9$\3\2\2\2\u00aa\u00ab")
        buf.write("\7,\2\2\u00ab&\3\2\2\2\u00ac\u00ad\7\61\2\2\u00ad(\3\2")
        buf.write("\2\2\u00ae\u00af\7-\2\2\u00af*\3\2\2\2\u00b0\u00b1\7/")
        buf.write("\2\2\u00b1,\3\2\2\2\u00b2\u00b3\7?\2\2\u00b3\u00b4\7?")
        buf.write("\2\2\u00b4.\3\2\2\2\u00b5\u00b6\7#\2\2\u00b6\u00b7\7?")
        buf.write("\2\2\u00b7\60\3\2\2\2\u00b8\u00b9\7>\2\2\u00b9\62\3\2")
        buf.write("\2\2\u00ba\u00bb\7@\2\2\u00bb\64\3\2\2\2\u00bc\u00bd\7")
        buf.write(">\2\2\u00bd\u00be\7?\2\2\u00be\66\3\2\2\2\u00bf\u00c0")
        buf.write("\7@\2\2\u00c0\u00c1\7?\2\2\u00c18\3\2\2\2\u00c2\u00c3")
        buf.write("\7c\2\2\u00c3\u00c4\7p\2\2\u00c4\u00c5\7f\2\2\u00c5:\3")
        buf.write("\2\2\2\u00c6\u00c7\7(\2\2\u00c7\u00c8\7(\2\2\u00c8<\3")
        buf.write("\2\2\2\u00c9\u00ca\7p\2\2\u00ca\u00cb\7q\2\2\u00cb\u00cc")
        buf.write("\7v\2\2\u00cc>\3\2\2\2\u00cd\u00ce\7v\2\2\u00ce\u00cf")
        buf.write("\7t\2\2\u00cf\u00d0\7w\2\2\u00d0\u00d1\7g\2\2\u00d1@\3")
        buf.write("\2\2\2\u00d2\u00d3\7h\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5")
        buf.write("\7n\2\2\u00d5\u00d6\7u\2\2\u00d6\u00d7\7g\2\2\u00d7B\3")
        buf.write("\2\2\2\u00d8\u00dc\t\2\2\2\u00d9\u00db\t\3\2\2\u00da\u00d9")
        buf.write("\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc")
        buf.write("\u00dd\3\2\2\2\u00ddD\3\2\2\2\u00de\u00dc\3\2\2\2\u00df")
        buf.write("\u00e3\t\4\2\2\u00e0\u00e2\t\5\2\2\u00e1\u00e0\3\2\2\2")
        buf.write("\u00e2\u00e5\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3")
        buf.write("\2\2\2\u00e4F\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00e8")
        buf.write("\7/\2\2\u00e7\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00f4\5O(\2\u00ea\u00ec\7/\2\2\u00eb")
        buf.write("\u00ea\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2")
        buf.write("\u00ed\u00ef\5Q)\2\u00ee\u00f0\5O(\2\u00ef\u00ee\3\2\2")
        buf.write("\2\u00f0\u00f1\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2")
        buf.write("\3\2\2\2\u00f2\u00f4\3\2\2\2\u00f3\u00e7\3\2\2\2\u00f3")
        buf.write("\u00eb\3\2\2\2\u00f4H\3\2\2\2\u00f5\u00f6\5G$\2\u00f6")
        buf.write("\u00f8\7\60\2\2\u00f7\u00f9\5O(\2\u00f8\u00f7\3\2\2\2")
        buf.write("\u00f9\u00fa\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3")
        buf.write("\2\2\2\u00fb\u0104\3\2\2\2\u00fc\u00fd\5G$\2\u00fd\u00ff")
        buf.write("\7\60\2\2\u00fe\u0100\5O(\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u00f5\3\2\2\2\u0103\u00fc\3")
        buf.write("\2\2\2\u0104J\3\2\2\2\u0105\u0106\7k\2\2\u0106\u0107\7")
        buf.write("p\2\2\u0107\u011d\7v\2\2\u0108\u0109\7h\2\2\u0109\u010a")
        buf.write("\7n\2\2\u010a\u010b\7q\2\2\u010b\u010c\7c\2\2\u010c\u011d")
        buf.write("\7v\2\2\u010d\u010e\7d\2\2\u010e\u010f\7q\2\2\u010f\u0110")
        buf.write("\7q\2\2\u0110\u011d\7n\2\2\u0111\u0112\7r\2\2\u0112\u0113")
        buf.write("\7c\2\2\u0113\u0114\7t\2\2\u0114\u0115\7v\2\2\u0115\u0116")
        buf.write("\7k\2\2\u0116\u0117\7e\2\2\u0117\u0118\7k\2\2\u0118\u0119")
        buf.write("\7r\2\2\u0119\u011a\7c\2\2\u011a\u011b\7p\2\2\u011b\u011d")
        buf.write("\7v\2\2\u011c\u0105\3\2\2\2\u011c\u0108\3\2\2\2\u011c")
        buf.write("\u010d\3\2\2\2\u011c\u0111\3\2\2\2\u011dL\3\2\2\2\u011e")
        buf.write("\u0120\t\6\2\2\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\u0124\b\'\2\2\u0124N\3\2\2\2\u0125\u0126")
        buf.write("\4\62;\2\u0126P\3\2\2\2\u0127\u0128\4\63;\2\u0128R\3\2")
        buf.write("\2\2\u0129\u012a\7\61\2\2\u012a\u012b\7,\2\2\u012b\u012f")
        buf.write("\3\2\2\2\u012c\u012e\13\2\2\2\u012d\u012c\3\2\2\2\u012e")
        buf.write("\u0131\3\2\2\2\u012f\u0130\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u0130\u0132\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0133\7")
        buf.write(",\2\2\u0133\u0134\7\61\2\2\u0134\u0135\3\2\2\2\u0135\u0136")
        buf.write("\b*\2\2\u0136T\3\2\2\2\u0137\u0138\7\61\2\2\u0138\u0139")
        buf.write("\7\61\2\2\u0139\u013d\3\2\2\2\u013a\u013c\n\7\2\2\u013b")
        buf.write("\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2")
        buf.write("\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u013d\3")
        buf.write("\2\2\2\u0140\u0141\b+\2\2\u0141V\3\2\2\2\20\2\u00dc\u00e3")
        buf.write("\u00e7\u00eb\u00f1\u00f3\u00fa\u0101\u0103\u011c\u0121")
        buf.write("\u012f\u013d\3\2\3\2")
        return buf.getvalue()


class TxScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    LABEL = 33
    LABELUPPER = 34
    NUMBER = 35
    REAL = 36
    TYPE = 37
    WS = 38
    COMMENT = 39
    LINE_COMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'contract'", "'{'", "'}'", "'int'", "'string'", "'constraint'", 
            "'('", "')'", "'function'", "'payable'", "'skip'", "'require'", 
            "'if'", "'else'", "'='", "'!'", "';'", "'*'", "'/'", "'+'", 
            "'-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'and'", 
            "'&&'", "'not'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "LABEL", "LABELUPPER", "NUMBER", "REAL", "TYPE", "WS", "COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "LABEL", "LABELUPPER", "NUMBER", "REAL", "TYPE", "WS", 
                  "DIGIT", "DIGIT_NOT_ZERO", "COMMENT", "LINE_COMMENT" ]

    grammarFileName = "TxScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


