; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((Bank) (coinbase) (withdraw) (deposit))))
 (declare-fun w_0 () Int)
(declare-fun myBalances_1_2 () Int)
(declare-fun myBalances_0_2 () Int)
(declare-fun myBalances_1_1 () Int)
(declare-fun myBalances_0_1 () Int)
(declare-fun myBalances_1_0 () Int)
(declare-fun myBalances_0_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun w_1 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun myBalances_2_2 () Int)
(declare-fun myBalances_2_1 () Int)
(declare-fun myBalances_2_0 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun xn_1 () Int)
(declare-fun t_myBalances_1_0_2 () Int)
(declare-fun t_myBalances_1_0_1 () Int)
(declare-fun t_myBalances_1_0_0 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun withdraw_amount_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun f_1 () Proc)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x120 (= myBalances_0_2 myBalances_1_2)))
 (let (($x119 (= myBalances_0_1 myBalances_1_1)))
 (let (($x118 (= myBalances_0_0 myBalances_1_0)))
 (let (($x116 (= aw_1_2 aw_0_2)))
 (let (($x115 (= aw_1_1 aw_0_1)))
 (let (($x114 (= aw_1_0 aw_0_0)))
 (let (($x113 (= w_1 w_0)))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) (and $x113 (and $x114 $x115 $x116) (and $x118 $x119 $x120)))))))))))
(assert
 (let (($x179 (= myBalances_1_2 myBalances_2_2)))
 (let (($x178 (= myBalances_1_1 myBalances_2_1)))
 (let (($x177 (= myBalances_1_0 myBalances_2_0)))
 (let (($x180 (and $x177 $x178 $x179)))
 (let (($x164 (= aw_2_2 aw_1_2)))
 (let (($x163 (= aw_2_1 aw_1_1)))
 (let (($x162 (= aw_2_0 aw_1_0)))
 (let (($x165 (and $x162 $x163 $x164)))
 (let (($x161 (= w_2 t_w_1_0)))
 (let (($x135 (= t_w_1_0 (+ w_1 xn_1))))
 (let (($x168 (= t_myBalances_1_0_2 myBalances_2_2)))
 (let (($x167 (= t_myBalances_1_0_1 myBalances_2_1)))
 (let (($x166 (= t_myBalances_1_0_0 myBalances_2_0)))
 (let (($x169 (and $x166 $x167 $x168)))
 (let (($x223 (= aw_2_2 t_aw_1_0_2)))
 (let (($x222 (= aw_2_1 t_aw_1_0_1)))
 (let (($x221 (= aw_2_0 t_aw_1_0_0)))
 (let (($x225 (and $x161 (and $x221 $x222 $x223) $x169)))
 (let (($x217 (= t_aw_1_0_2 aw_1_2)))
 (let (($x156 (= xa_1 2)))
 (let (($x213 (= t_aw_1_0_1 aw_1_1)))
 (let (($x153 (= xa_1 1)))
 (let (($x209 (= t_aw_1_0_0 aw_1_0)))
 (let (($x150 (= xa_1 0)))
 (let (($x219 (and (ite $x150 (= t_aw_1_0_0 (+ aw_1_0 withdraw_amount_1)) $x209) (ite $x153 (= t_aw_1_0_1 (+ aw_1_1 withdraw_amount_1)) $x213) (ite $x156 (= t_aw_1_0_2 (+ aw_1_2 withdraw_amount_1)) $x217))))
 (let (($x226 (and (and (= t_w_1_0 (- w_1 withdraw_amount_1)) $x219) true $x225)))
 (let (($x176 (= w_2 w_1)))
 (let (($x181 (and $x176 $x165 $x180)))
 (let (($x158 (or $x156 (= t_myBalances_1_0_2 myBalances_1_2))))
 (let (($x155 (or $x153 (= t_myBalances_1_0_1 myBalances_1_1))))
 (let (($x152 (or $x150 (= t_myBalances_1_0_0 myBalances_1_0))))
 (let (($x159 (and $x152 $x155 $x158)))
 (let (($x145 (and (distinct xa_1 2) true)))
 (let (($x200 (or $x145 (= t_myBalances_1_0_2 (- myBalances_1_2 withdraw_amount_1)))))
 (let (($x141 (and (distinct xa_1 1) true)))
 (let (($x197 (or $x141 (= t_myBalances_1_0_1 (- myBalances_1_1 withdraw_amount_1)))))
 (let (($x136 (and (distinct xa_1 0) true)))
 (let (($x194 (or $x136 (= t_myBalances_1_0_0 (- myBalances_1_0 withdraw_amount_1)))))
 (let (($x228 (and (and (and $x194 $x197 $x200) $x159) (ite (not (>= withdraw_amount_1 0)) $x181 $x226))))
 (let (($x190 (and (or $x136 (<= withdraw_amount_1 myBalances_1_0)) (or $x141 (<= withdraw_amount_1 myBalances_1_1)) (or $x145 (<= withdraw_amount_1 myBalances_1_2)))))
 (let (($x233 (and (and (ite (not $x190) $x181 (and (and $x228 true $x225))) true $x225))))
 (let (($x236 (ite (not (= xn_1 0)) $x181 (and (ite (not (> withdraw_amount_1 0)) $x181 $x233)))))
 (let (($x173 (= f_1 withdraw)))
 (let (($x149 (and (or $x136 (= t_myBalances_1_0_0 (+ myBalances_1_0 xn_1))) (or $x141 (= t_myBalances_1_0_1 (+ myBalances_1_1 xn_1))) (or $x145 (= t_myBalances_1_0_2 (+ myBalances_1_2 xn_1))))))
 (let (($x133 (= f_1 deposit)))
 (let (($x240 (ite $x133 (and $x135 (and (and $x149 $x159) true (and $x161 $x165 $x169))) (ite $x173 $x236 (and $x135 (and $x161 $x165 $x180))))))
 (let (($x130 (>= aw_1_2 0)))
 (let (($x129 (>= aw_1_1 0)))
 (let (($x128 (>= aw_1_0 0)))
 (let (($x131 (and $x128 $x129 $x130)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x131 (>= block_num_2 block_num_1) $x240))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x400 (exists ((xa_q Int) )(let (($x394 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (withdraw_amount0_q Int) (myBalancesq0_0 Int) (myBalancesq0_1 Int) (myBalancesq0_2 Int) (t_myBalancesq0_0_0 Int) (t_myBalancesq0_0_1 Int) (t_myBalancesq0_0_2 Int) )(let (($x330 (and (distinct xa_q 2) true)))
 (let (($x332 (and (distinct xa_q 1) true)))
 (let (($x334 (and (distinct xa_q 0) true)))
 (let (($x336 (and (or $x334 (not (>= (- awq0_0 aw_1_0) myBalances_1_0))) (or $x332 (not (>= (- awq0_1 aw_1_1) myBalances_1_1))) (or $x330 (not (>= (- awq0_2 aw_1_2) myBalances_1_2))))))
 (let (($x480 (= myBalances_1_2 myBalancesq0_2)))
 (let (($x481 (= myBalances_1_1 myBalancesq0_1)))
 (let (($x482 (= myBalances_1_0 myBalancesq0_0)))
 (let (($x483 (and $x482 $x481 $x480)))
 (let (($x484 (= awq0_2 aw_1_2)))
 (let (($x485 (= awq0_1 aw_1_1)))
 (let (($x486 (= awq0_0 aw_1_0)))
 (let (($x487 (and $x486 $x485 $x484)))
 (let (($x488 (= wq0 t_wq0_0)))
 (let (($x491 (= t_wq0_0 (+ w_1 xn_q0))))
 (let (($x493 (= t_myBalancesq0_0_2 myBalancesq0_2)))
 (let (($x494 (= t_myBalancesq0_0_1 myBalancesq0_1)))
 (let (($x495 (= t_myBalancesq0_0_0 myBalancesq0_0)))
 (let (($x496 (and $x495 $x494 $x493)))
 (let (($x501 (and $x488 (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1) (= awq0_2 t_awq0_0_2)) $x496)))
 (let (($x344 (and (ite (= xa_q 0) (= t_awq0_0_0 (+ aw_1_0 withdraw_amount0_q)) (= t_awq0_0_0 aw_1_0)) (ite (= xa_q 1) (= t_awq0_0_1 (+ aw_1_1 withdraw_amount0_q)) (= t_awq0_0_1 aw_1_1)) (ite (= xa_q 2) (= t_awq0_0_2 (+ aw_1_2 withdraw_amount0_q)) (= t_awq0_0_2 aw_1_2)))))
 (let (($x519 (= wq0 w_1)))
 (let (($x520 (and $x519 $x487 $x483)))
 (let (($x521 (>= withdraw_amount0_q 0)))
 (let (($x522 (not $x521)))
 (let (($x337 (= xa_q 2)))
 (let (($x350 (or $x337 (= t_myBalancesq0_0_2 myBalances_1_2))))
 (let (($x339 (= xa_q 1)))
 (let (($x351 (or $x339 (= t_myBalancesq0_0_1 myBalances_1_1))))
 (let (($x341 (= xa_q 0)))
 (let (($x352 (or $x341 (= t_myBalancesq0_0_0 myBalances_1_0))))
 (let (($x353 (and $x352 $x351 $x350)))
 (let (($x357 (and (or $x334 (= t_myBalancesq0_0_0 (- myBalances_1_0 withdraw_amount0_q))) (or $x332 (= t_myBalancesq0_0_1 (- myBalances_1_1 withdraw_amount0_q))) (or $x330 (= t_myBalancesq0_0_2 (- myBalances_1_2 withdraw_amount0_q))))))
 (let (($x359 (and (and $x357 $x353) (ite $x522 $x520 (and (and (= t_wq0_0 (- w_1 withdraw_amount0_q)) $x344) true $x501)))))
 (let (($x365 (and (or $x334 (<= withdraw_amount0_q myBalances_1_0)) (or $x332 (<= withdraw_amount0_q myBalances_1_1)) (or $x330 (<= withdraw_amount0_q myBalances_1_2)))))
 (let (($x375 (and (and (ite (not $x365) $x520 (and (and $x359 true $x501))) true $x501))))
 (let (($x557 (not (> withdraw_amount0_q 0))))
 (let (($x560 (= xn_q0 0)))
 (let (($x561 (not $x560)))
 (let (($x563 (= f_q0 withdraw)))
 (let (($x379 (ite $x563 (ite $x561 $x520 (and (ite $x557 $x520 $x375))) (and $x491 (and $x488 $x487 $x483)))))
 (let (($x383 (and (or $x334 (= t_myBalancesq0_0_0 (+ myBalances_1_0 xn_q0))) (or $x332 (= t_myBalancesq0_0_1 (+ myBalances_1_1 xn_q0))) (or $x330 (= t_myBalancesq0_0_2 (+ myBalances_1_2 xn_q0))))))
 (let (($x579 (= f_q0 deposit)))
 (let (($x387 (ite $x579 (and $x491 (and (and $x383 $x353) true (and $x488 $x487 $x496))) $x379)))
 (let (($x130 (>= aw_1_2 0)))
 (let (($x129 (>= aw_1_1 0)))
 (let (($x128 (>= aw_1_0 0)))
 (let (($x131 (and $x128 $x129 $x130)))
 (let (($x581 (>= xn_q0 0)))
 (let (($x388 (<= xa_q 2)))
 (let (($x389 (>= xa_q 0)))
 (let (($x390 (and $x389 $x388 $x581)))
 (or (not (and $x390 $x131 (>= block_num_1 block_num_1) $x387)) $x336)))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x372 (and (or (and (distinct xa_q 0) true) (> myBalances_1_0 0)) (or (and (distinct xa_q 1) true) (> myBalances_1_1 0)) (or (and (distinct xa_q 2) true) (> myBalances_1_2 0)))))
 (let (($x373 (<= xa_q 2)))
 (let (($x374 (>= xa_q 0)))
 (let (($x398 (and $x374 $x373)))
 (and $x398 $x372 $x394)))))))
 ))
 (and $x400)))
(check-sat)
