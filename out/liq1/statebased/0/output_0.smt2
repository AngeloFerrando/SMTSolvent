; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((timeout) (win) (join))))
 (declare-fun w_0 () Int)
(declare-fun par2_1 () Int)
(declare-fun par2_0 () Int)
(declare-fun par1_1 () Int)
(declare-fun t_par1_0_0 () Int)
(declare-fun deadline_1 () Int)
(declare-fun t_deadline_0_0 () Int)
(declare-fun oracle_1 () Int)
(declare-fun t_oracle_0_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun t_w_0_0 () Int)
(declare-fun w_1 () Int)
(declare-fun par1_0 () Int)
(declare-fun deadline_0 () Int)
(declare-fun oracle_0 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun par2_2 () Int)
(declare-fun par1_2 () Int)
(declare-fun deadline_2 () Int)
(declare-fun oracle_2 () Int)
(declare-fun t_aw_1_1_2 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun t_aw_1_1_1 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun t_aw_1_1_0 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_1 () Int)
(declare-fun w_2 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun block_num_1 () Int)
(declare-fun xn_1 () Int)
(declare-fun win_winner_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun f_1 () Proc)
(declare-fun t_par2_1_0 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x294 (= par2_0 par2_1)))
 (let (($x301 (= t_par1_0_0 par1_1)))
 (let (($x300 (= t_deadline_0_0 deadline_1)))
 (let (($x299 (= t_oracle_0_0 oracle_1)))
 (let (($x289 (= aw_1_2 aw_0_2)))
 (let (($x288 (= aw_1_1 aw_0_1)))
 (let (($x287 (= aw_1_0 aw_0_0)))
 (let (($x290 (and $x287 $x288 $x289)))
 (let (($x298 (= w_1 t_w_0_0)))
 (let (($x303 (and (and true (and true true)) true (and $x298 $x290 $x299 $x300 $x301 $x294))))
 (let (($x293 (= par1_0 par1_1)))
 (let (($x292 (= deadline_0 deadline_1)))
 (let (($x291 (= oracle_0 oracle_1)))
 (let (($x286 (= w_1 w_0)))
 (let (($x305 (ite (not (= xn_0 1)) (and $x286 $x290 $x291 $x292 $x293 $x294) (and $x303))))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) (and (= t_w_0_0 (+ w_0 xn_0)) (and $x305)))))))))))))))))))
(assert
 (let (($x338 (= par2_1 par2_2)))
 (let (($x337 (= par1_1 par1_2)))
 (let (($x336 (= deadline_1 deadline_2)))
 (let (($x335 (= oracle_1 oracle_2)))
 (let (($x455 (= aw_2_2 t_aw_1_1_2)))
 (let (($x454 (= aw_2_1 t_aw_1_1_1)))
 (let (($x453 (= aw_2_0 t_aw_1_1_0)))
 (let (($x452 (= w_2 t_w_1_1)))
 (let (($x457 (and $x452 (and $x453 $x454 $x455) $x335 $x336 $x337 $x338)))
 (let (($x448 (= t_aw_1_1_2 t_aw_1_0_2)))
 (let (($x445 (= par2_1 2)))
 (let (($x443 (= t_aw_1_1_1 t_aw_1_0_1)))
 (let (($x440 (= par2_1 1)))
 (let (($x438 (= t_aw_1_1_0 t_aw_1_0_0)))
 (let (($x435 (= par2_1 0)))
 (let (($x450 (and (ite $x435 (= t_aw_1_1_0 (+ t_aw_1_0_0 1)) $x438) (ite $x440 (= t_aw_1_1_1 (+ t_aw_1_0_1 1)) $x443) (ite $x445 (= t_aw_1_1_2 (+ t_aw_1_0_2 1)) $x448))))
 (let (($x458 (and (and (= t_w_1_1 (- t_w_1_0 1)) $x450) true $x457)))
 (let (($x333 (= aw_2_2 aw_1_2)))
 (let (($x332 (= aw_2_1 aw_1_1)))
 (let (($x331 (= aw_2_0 aw_1_0)))
 (let (($x334 (and $x331 $x332 $x333)))
 (let (($x330 (= w_2 w_1)))
 (let (($x339 (and $x330 $x334 $x335 $x336 $x337 $x338)))
 (let (($x416 (not true)))
 (let (($x389 (= t_aw_1_0_2 aw_1_2)))
 (let (($x427 (= par1_1 2)))
 (let (($x384 (= t_aw_1_0_1 aw_1_1)))
 (let (($x423 (= par1_1 1)))
 (let (($x379 (= t_aw_1_0_0 aw_1_0)))
 (let (($x419 (= par1_1 0)))
 (let (($x431 (and (ite $x419 (= t_aw_1_0_0 (+ aw_1_0 1)) $x379) (ite $x423 (= t_aw_1_0_1 (+ aw_1_1 1)) $x384) (ite $x427 (= t_aw_1_0_2 (+ aw_1_2 1)) $x389))))
 (let (($x461 (and (and (= t_w_1_0 (- w_1 1)) $x431) (and (ite $x416 $x339 $x458) true $x457))))
 (let (($x415 (not (>= block_num_1 deadline_1))))
 (let (($x466 (and (ite $x415 $x339 (and (and (ite $x416 $x339 $x461) true $x457))) true $x457)))
 (let (($x362 (= w_1 2)))
 (let (($x363 (not $x362)))
 (let (($x360 (= xn_1 0)))
 (let (($x361 (not $x360)))
 (let (($x395 (= aw_2_2 t_aw_1_0_2)))
 (let (($x394 (= aw_2_1 t_aw_1_0_1)))
 (let (($x393 (= aw_2_0 t_aw_1_0_0)))
 (let (($x345 (= w_2 t_w_1_0)))
 (let (($x397 (and $x345 (and $x393 $x394 $x395) $x335 $x336 $x337 $x338)))
 (let (($x391 (and (ite (= win_winner_1 0) (= t_aw_1_0_0 (+ aw_1_0 w_1)) $x379) (ite (= win_winner_1 1) (= t_aw_1_0_1 (+ aw_1_1 w_1)) $x384) (ite (= win_winner_1 2) (= t_aw_1_0_2 (+ aw_1_2 w_1)) $x389))))
 (let (($x372 (>= w_1 0)))
 (let (($x373 (not $x372)))
 (let (($x399 (ite $x373 $x339 (and (and (= t_w_1_0 (- w_1 w_1)) $x391) true $x397))))
 (let (($x402 (ite (not (or (= win_winner_1 par1_1) (= win_winner_1 par2_1))) $x339 (and (and $x399 true $x397)))))
 (let (($x366 (< block_num_1 deadline_1)))
 (let (($x367 (not $x366)))
 (let (($x408 (ite (not (= xa_1 oracle_1)) $x339 (and (and (ite $x367 $x339 (and (and $x402 true $x397))) true $x397)))))
 (let (($x359 (= f_1 win)))
 (let (($x471 (ite $x359 (ite $x361 $x339 (and (ite $x363 $x339 (and (and $x408 true $x397))))) (ite $x361 $x339 (and (ite $x363 $x339 (and $x466)))))))
 (let (($x346 (= t_par2_1_0 par2_2)))
 (let (($x347 (and $x345 $x334 $x335 $x336 $x337 $x346)))
 (let (($x350 (ite (not (and (distinct xa_1 par1_1) true)) $x339 (and (and (= t_par2_1_0 xa_1) true $x347)))))
 (let (($x354 (and (ite (not (= xn_1 1)) $x339 (and (and $x350 true $x347))) true $x347)))
 (let (($x358 (and (= t_w_1_0 (+ w_1 xn_1)) (and (ite (not (= t_w_1_0 1)) $x339 (and $x354))))))
 (let (($x325 (= f_1 join)))
 (let (($x322 (>= aw_1_2 0)))
 (let (($x321 (>= aw_1_1 0)))
 (let (($x320 (>= aw_1_0 0)))
 (let (($x323 (and $x320 $x321 $x322)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x323 (>= block_num_2 block_num_1) (ite $x325 $x358 $x471))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x575 (exists ((xa_q Int) )(let (($x751 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_wq0_1 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (t_awq0_1_0 Int) (t_awq0_1_1 Int) (t_awq0_1_2 Int) (block_num_q0 Int) (win_winner0_q Int) (oracleq0 Int) (t_oracleq0_0 Int) (t_oracleq0_1 Int) (deadlineq0 Int) (t_deadlineq0_0 Int) (t_deadlineq0_1 Int) (par1q0 Int) (t_par1q0_0 Int) (t_par1q0_1 Int) (par2q0 Int) (t_par2q0_0 Int) (t_par2q0_1 Int) )(let (($x764 (and (or (and (distinct par2_1 0) true) (not (>= (- awq0_0 aw_1_0) 2))) (or (and (distinct par2_1 1) true) (not (>= (- awq0_1 aw_1_1) 2))) (or (and (distinct par2_1 2) true) (not (>= (- awq0_2 aw_1_2) 2))))))
 (let (($x768 (and (or (and (distinct par1_1 0) true) (not (>= (- awq0_0 aw_1_0) 2))) (or (and (distinct par1_1 1) true) (not (>= (- awq0_1 aw_1_1) 2))) (or (and (distinct par1_1 2) true) (not (>= (- awq0_2 aw_1_2) 2))))))
 (let (($x769 (or $x768 $x764)))
 (let (($x770 (= par2_1 par2q0)))
 (let (($x771 (= par1_1 par1q0)))
 (let (($x772 (= deadline_1 deadlineq0)))
 (let (($x773 (= oracle_1 oracleq0)))
 (let (($x777 (and (= awq0_0 t_awq0_1_0) (= awq0_1 t_awq0_1_1) (= awq0_2 t_awq0_1_2))))
 (let (($x778 (= wq0 t_wq0_1)))
 (let (($x779 (and $x778 $x777 $x773 $x772 $x771 $x770)))
 (let (($x792 (and (ite (= par2_1 0) (= t_awq0_1_0 (+ t_awq0_0_0 1)) (= t_awq0_1_0 t_awq0_0_0)) (ite (= par2_1 1) (= t_awq0_1_1 (+ t_awq0_0_1 1)) (= t_awq0_1_1 t_awq0_0_1)) (ite (= par2_1 2) (= t_awq0_1_2 (+ t_awq0_0_2 1)) (= t_awq0_1_2 t_awq0_0_2)))))
 (let (($x794 (= t_wq0_1 (- t_wq0_0 1))))
 (let (($x800 (and (= awq0_0 aw_1_0) (= awq0_1 aw_1_1) (= awq0_2 aw_1_2))))
 (let (($x802 (and (= wq0 w_1) $x800 $x773 $x772 $x771 $x770)))
 (let (($x416 (not true)))
 (let (($x805 (= t_awq0_0_2 aw_1_2)))
 (let (($x427 (= par1_1 2)))
 (let (($x808 (= t_awq0_0_1 aw_1_1)))
 (let (($x423 (= par1_1 1)))
 (let (($x811 (= t_awq0_0_0 aw_1_0)))
 (let (($x419 (= par1_1 0)))
 (let (($x814 (and (ite $x419 (= t_awq0_0_0 (+ aw_1_0 1)) $x811) (ite $x423 (= t_awq0_0_1 (+ aw_1_1 1)) $x808) (ite $x427 (= t_awq0_0_2 (+ aw_1_2 1)) $x805))))
 (let (($x817 (and (and (= t_wq0_0 (- w_1 1)) $x814) (and (ite $x416 $x802 (and (and $x794 $x792) true $x779)) true $x779))))
 (let (($x415 (not (>= block_num_1 deadline_1))))
 (let (($x822 (and (ite $x415 $x802 (and (and (ite $x416 $x802 $x817) true $x779))) true $x779)))
 (let (($x362 (= w_1 2)))
 (let (($x363 (not $x362)))
 (let (($x827 (not (= xn_q0 0))))
 (let (($x832 (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1) (= awq0_2 t_awq0_0_2))))
 (let (($x833 (= wq0 t_wq0_0)))
 (let (($x834 (and $x833 $x832 $x773 $x772 $x771 $x770)))
 (let (($x844 (and (ite (= win_winner0_q 0) (= t_awq0_0_0 (+ aw_1_0 w_1)) $x811) (ite (= win_winner0_q 1) (= t_awq0_0_1 (+ aw_1_1 w_1)) $x808) (ite (= win_winner0_q 2) (= t_awq0_0_2 (+ aw_1_2 w_1)) $x805))))
 (let (($x372 (>= w_1 0)))
 (let (($x373 (not $x372)))
 (let (($x848 (ite $x373 $x802 (and (and (= t_wq0_0 (- w_1 w_1)) $x844) true $x834))))
 (let (($x855 (ite (not (or (= win_winner0_q par1_1) (= win_winner0_q par2_1))) $x802 (and (and $x848 true $x834)))))
 (let (($x366 (< block_num_1 deadline_1)))
 (let (($x367 (not $x366)))
 (let (($x610 (not (= oracle_1 oracle_1))))
 (let (($x861 (ite $x610 $x802 (and (and (ite $x367 $x802 (and (and $x855 true $x834))) true $x834)))))
 (let (($x867 (= f_q0 win)))
 (let (($x868 (ite $x867 (ite $x827 $x802 (and (ite $x363 $x802 (and (and $x861 true $x834))))) (ite $x827 $x802 (and (ite $x363 $x802 (and $x822)))))))
 (let (($x869 (= t_par2q0_0 par2q0)))
 (let (($x870 (and $x833 $x800 $x773 $x772 $x771 $x869)))
 (let (($x590 (not (and (distinct oracle_1 par1_1) true))))
 (let (($x875 (and (ite $x590 $x802 (and (and (= t_par2q0_0 oracle_1) true $x870))) true $x870)))
 (let (($x878 (not (= xn_q0 1))))
 (let (($x883 (not (= t_wq0_0 1))))
 (let (($x885 (and (ite $x883 $x802 (and (and (ite $x878 $x802 (and $x875)) true $x870))))))
 (let (($x889 (= f_q0 join)))
 (let (($x322 (>= aw_1_2 0)))
 (let (($x321 (>= aw_1_1 0)))
 (let (($x320 (>= aw_1_0 0)))
 (let (($x323 (and $x320 $x321 $x322)))
 (let (($x568 (<= oracle_1 2)))
 (let (($x567 (>= oracle_1 0)))
 (let (($x893 (and $x567 $x568 (>= xn_q0 0))))
 (let (($x894 (and $x893 $x323 (>= block_num_q0 block_num_1) (ite $x889 (and (= t_wq0_0 (+ w_1 xn_q0)) $x885) $x868))))
 (or (not $x894) $x769))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x362 (= w_1 2)))
 (let (($x366 (< block_num_1 deadline_1)))
 (let (($x566 (and $x366 $x362)))
 (let (($x571 (<= xa_q 2)))
 (let (($x572 (>= xa_q 0)))
 (let (($x573 (and $x572 $x571)))
 (and $x573 $x566 $x751)))))))))
 ))
 (and $x575)))
(check-sat)
