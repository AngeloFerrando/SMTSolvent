; benchmark generated from python API
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((join) (win) (Bet))))
 (declare-fun w_0 () Int)
(declare-fun state_1 () Int)
(declare-fun t_state_0_0 () Int)
(declare-fun par2_1 () Int)
(declare-fun par2_0 () Int)
(declare-fun par1_1 () Int)
(declare-fun t_par1_0_0 () Int)
(declare-fun deadline_1 () Int)
(declare-fun t_deadline_0_0 () Int)
(declare-fun oracle_1 () Int)
(declare-fun t_oracle_0_0 () Int)
(declare-fun aw_0_2 () Int)
(declare-fun aw_1_2 () Int)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun t_w_0_0 () Int)
(declare-fun w_1 () Int)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun state_2 () Int)
(declare-fun t_state_1_0 () Int)
(declare-fun par2_2 () Int)
(declare-fun par1_2 () Int)
(declare-fun deadline_2 () Int)
(declare-fun oracle_2 () Int)
(declare-fun t_aw_1_0_2 () Int)
(declare-fun aw_2_2 () Int)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun win_winner_1 () Int)
(declare-fun xn_1 () Int)
(declare-fun t_par2_1_0 () Int)
(declare-fun xa_1 () Int)
(declare-fun f_1 () Proc)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (= w_0 0))
(assert
 (let (($x176 (= t_state_0_0 state_1)))
 (let (($x175 (= par2_0 par2_1)))
 (let (($x174 (= t_par1_0_0 par1_1)))
 (let (($x173 (= t_deadline_0_0 deadline_1)))
 (let (($x172 (= t_oracle_0_0 oracle_1)))
 (let (($x170 (= aw_1_2 aw_0_2)))
 (let (($x169 (= aw_1_1 aw_0_1)))
 (let (($x168 (= aw_1_0 aw_0_0)))
 (let (($x167 (= w_1 t_w_0_0)))
 (let (($x178 (and (and (= xn_0 1) (and true (and true (and true true)))) true (and $x167 (and $x168 $x169 $x170) $x172 $x173 $x174 $x175 $x176))))
 (and (and (>= xa_0 0) (<= xa_0 2) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0) (>= aw_0_2 0)) (and (= t_w_0_0 (+ w_0 xn_0)) $x178)))))))))))))
(assert
 (let (($x218 (= t_state_1_0 state_2)))
 (let (($x207 (= par2_1 par2_2)))
 (let (($x206 (= par1_1 par1_2)))
 (let (($x205 (= deadline_1 deadline_2)))
 (let (($x204 (= oracle_1 oracle_2)))
 (let (($x264 (= aw_2_2 t_aw_1_0_2)))
 (let (($x263 (= aw_2_1 t_aw_1_0_1)))
 (let (($x262 (= aw_2_0 t_aw_1_0_0)))
 (let (($x216 (= w_2 t_w_1_0)))
 (let (($x266 (and $x216 (and $x262 $x263 $x264) $x204 $x205 $x206 $x207 $x218)))
 (let (($x258 (= t_aw_1_0_2 aw_1_2)))
 (let (($x255 (= win_winner_1 2)))
 (let (($x253 (= t_aw_1_0_1 aw_1_1)))
 (let (($x250 (= win_winner_1 1)))
 (let (($x248 (= t_aw_1_0_0 aw_1_0)))
 (let (($x245 (= win_winner_1 0)))
 (let (($x260 (and (ite $x245 (= t_aw_1_0_0 (+ aw_1_0 w_1)) $x248) (ite $x250 (= t_aw_1_0_1 (+ aw_1_1 w_1)) $x253) (ite $x255 (= t_aw_1_0_2 (+ aw_1_2 w_1)) $x258))))
 (let (($x208 (= state_1 state_2)))
 (let (($x202 (= aw_2_2 aw_1_2)))
 (let (($x201 (= aw_2_1 aw_1_1)))
 (let (($x200 (= aw_2_0 aw_1_0)))
 (let (($x203 (and $x200 $x201 $x202)))
 (let (($x199 (= w_2 w_1)))
 (let (($x209 (and $x199 $x203 $x204 $x205 $x206 $x207 $x208)))
 (let (($x241 (>= w_1 0)))
 (let (($x242 (not $x241)))
 (let (($x268 (ite $x242 $x209 (and (and (= t_w_1_0 (- w_1 w_1)) $x260) true $x266))))
 (let (($x271 (ite (not (or (= win_winner_1 par1_1) (= win_winner_1 par2_1))) $x209 (and (and $x268 true $x266)))))
 (let (($x236 (= t_state_1_0 2)))
 (let (($x234 (= state_1 1)))
 (let (($x235 (not $x234)))
 (let (($x277 (ite (not (= xn_1 0)) $x209 (and (ite $x235 $x209 (and (and (and $x236 $x271) true $x266)))))))
 (let (($x217 (= t_par2_1_0 par2_2)))
 (let (($x219 (and $x216 $x203 $x204 $x205 $x206 $x217 $x218)))
 (let (($x222 (ite (not (and (distinct xa_1 par1_1) true)) $x209 (and (and (= t_par2_1_0 xa_1) true $x219)))))
 (let (($x210 (= t_state_1_0 1)))
 (let (($x226 (and $x210 (ite (not (= xn_1 2)) $x209 (and (and $x222 true $x219))))))
 (let (($x197 (= state_1 0)))
 (let (($x198 (not $x197)))
 (let (($x231 (and (= t_w_1_0 (+ w_1 xn_1)) (and (ite $x198 $x209 (and (and $x226 true $x219)))))))
 (let (($x194 (= f_1 join)))
 (let (($x191 (>= aw_1_2 0)))
 (let (($x190 (>= aw_1_1 0)))
 (let (($x189 (>= aw_1_0 0)))
 (let (($x192 (and $x189 $x190 $x191)))
 (and (and (>= xa_1 0) (<= xa_1 2) (>= xn_1 0)) $x192 (>= block_num_2 block_num_1) (ite $x194 $x231 $x277))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x356 (exists ((xa_q Int) )(let (($x351 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (awq0_2 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (t_awq0_0_2 Int) (win_winner0_q Int) (oracleq0 Int) (t_oracleq0_0 Int) (deadlineq0 Int) (t_deadlineq0_0 Int) (par1q0 Int) (t_par1q0_0 Int) (par2q0 Int) (t_par2q0_0 Int) (stateq0 Int) (t_stateq0_0 Int) )(let (($x462 (and (or (and (distinct par2_1 0) true) (not (>= (- awq0_0 aw_1_0) 2))) (or (and (distinct par2_1 1) true) (not (>= (- awq0_1 aw_1_1) 2))) (or (and (distinct par2_1 2) true) (not (>= (- awq0_2 aw_1_2) 2))))))
 (let (($x466 (and (or (and (distinct par1_1 0) true) (not (>= (- awq0_0 aw_1_0) 2))) (or (and (distinct par1_1 1) true) (not (>= (- awq0_1 aw_1_1) 2))) (or (and (distinct par1_1 2) true) (not (>= (- awq0_2 aw_1_2) 2))))))
 (let (($x467 (or $x466 $x462)))
 (let (($x468 (= t_stateq0_0 stateq0)))
 (let (($x469 (= par2_1 par2q0)))
 (let (($x470 (= par1_1 par1q0)))
 (let (($x471 (= deadline_1 deadlineq0)))
 (let (($x472 (= oracle_1 oracleq0)))
 (let (($x473 (= awq0_2 t_awq0_0_2)))
 (let (($x476 (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1) $x473)))
 (let (($x477 (= wq0 t_wq0_0)))
 (let (($x478 (and $x477 $x476 $x472 $x471 $x470 $x469 $x468)))
 (let (($x491 (and (ite (= win_winner0_q 0) (= t_awq0_0_0 (+ aw_1_0 w_1)) (= t_awq0_0_0 aw_1_0)) (ite (= win_winner0_q 1) (= t_awq0_0_1 (+ aw_1_1 w_1)) (= t_awq0_0_1 aw_1_1)) (ite (= win_winner0_q 2) (= t_awq0_0_2 (+ aw_1_2 w_1)) (= t_awq0_0_2 aw_1_2)))))
 (let (($x495 (= state_1 stateq0)))
 (let (($x499 (and (= awq0_0 aw_1_0) (= awq0_1 aw_1_1) (= awq0_2 aw_1_2))))
 (let (($x501 (and (= wq0 w_1) $x499 $x472 $x471 $x470 $x469 $x495)))
 (let (($x241 (>= w_1 0)))
 (let (($x242 (not $x241)))
 (let (($x502 (ite $x242 $x501 (and (and (= t_wq0_0 (- w_1 w_1)) $x491) true $x478))))
 (let (($x509 (ite (not (or (= win_winner0_q par1_1) (= win_winner0_q par2_1))) $x501 (and (and $x502 true $x478)))))
 (let (($x510 (= t_stateq0_0 2)))
 (let (($x234 (= state_1 1)))
 (let (($x235 (not $x234)))
 (let (($x517 (not (= xn_q0 0))))
 (let (($x518 (ite $x517 $x501 (and (ite $x235 $x501 (and (and (and $x510 $x509) true $x478)))))))
 (let (($x519 (= t_par2q0_0 par2q0)))
 (let (($x520 (and $x477 $x499 $x472 $x471 $x470 $x519 $x468)))
 (let (($x343 (ite (not (and (distinct xa_q par1_1) true)) $x501 (and (and (= t_par2q0_0 xa_q) true $x520)))))
 (let (($x528 (not (= xn_q0 2))))
 (let (($x530 (= t_stateq0_0 1)))
 (let (($x334 (and (and $x530 (ite $x528 $x501 (and (and $x343 true $x520)))) true $x520)))
 (let (($x197 (= state_1 0)))
 (let (($x198 (not $x197)))
 (let (($x539 (= f_q0 join)))
 (let (($x339 (ite $x539 (and (= t_wq0_0 (+ w_1 xn_q0)) (and (ite $x198 $x501 (and $x334)))) $x518)))
 (let (($x326 (>= block_num_1 block_num_1)))
 (let (($x191 (>= aw_1_2 0)))
 (let (($x190 (>= aw_1_1 0)))
 (let (($x189 (>= aw_1_0 0)))
 (let (($x192 (and $x189 $x190 $x191)))
 (let (($x541 (>= xn_q0 0)))
 (let (($x347 (and (>= xa_q 0) (<= xa_q 2) $x541)))
 (or (not (and $x347 $x192 $x326 $x339)) $x467))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x234 (= state_1 1)))
 (let (($x352 (<= xa_q 2)))
 (let (($x353 (>= xa_q 0)))
 (let (($x354 (and $x353 $x352)))
 (and $x354 $x234 $x351)))))))
 ))
 (and $x356)))
(check-sat)
